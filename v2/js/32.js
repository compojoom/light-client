(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[32],{

/***/ "../node_modules/pouchdb-adapter-indexeddb/lib/index.es.js":
/*!*****************************************************************!*\
  !*** ../node_modules/pouchdb-adapter-indexeddb/lib/index.es.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pouchdb-binary-utils */ \"../node_modules/pouchdb-binary-utils/lib/index-browser.es.js\");\n/* harmony import */ var pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pouchdb-adapter-utils */ \"../node_modules/pouchdb-adapter-utils/lib/index.es.js\");\n/* harmony import */ var pouchdb_md5__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pouchdb-md5 */ \"../node_modules/pouchdb-md5/lib/index-browser.es.js\");\n/* harmony import */ var pouchdb_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pouchdb-utils */ \"../node_modules/pouchdb-utils/lib/index-browser.es.js\");\n/* harmony import */ var pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pouchdb-errors */ \"../node_modules/pouchdb-errors/lib/index.es.js\");\n/* harmony import */ var pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! pouchdb-merge */ \"../node_modules/pouchdb-merge/lib/index.es.js\");\n\n\n\n\n\n\n\nvar IDB_NULL = Number.MIN_SAFE_INTEGER;\nvar IDB_FALSE = Number.MIN_SAFE_INTEGER + 1;\nvar IDB_TRUE = Number.MIN_SAFE_INTEGER + 2;\n\n// These are the same as bellow but without the global flag\n// we want to use RegExp.test because it's really fast, but the global flag\n// makes the regex const stateful (seriously) as it walked through all instances\nvar TEST_KEY_INVALID = /^[^a-zA-Z_$]|[^a-zA-Z0-9_$]+/;\nvar TEST_PATH_INVALID = /\\\\.|(^|\\.)[^a-zA-Z_$]|[^a-zA-Z0-9_$.]+/;\nfunction needsSanitise(name, isPath) {\n  if (isPath) {\n    return TEST_PATH_INVALID.test(name);\n  } else {\n    return TEST_KEY_INVALID.test(name);\n  }\n}\n\n//\n// IndexedDB only allows valid JS names in its index paths, whereas JSON allows\n// for any string at all. This converts invalid JS names to valid ones, to allow\n// for them to be indexed.\n//\n// For example, \"foo-bar\" is a valid JSON key, but cannot be a valid JS name\n// (because that would be read as foo minus bar).\n//\n// Very high level rules for valid JS names are:\n//  - First character cannot start with a number\n//  - Otherwise all characters must be be a-z, A-Z, 0-9, $ or _.\n//  - We allow . unless the name represents a single field, as that represents\n//    a deep index path.\n//\n// This is more aggressive than it needs to be, but also simpler.\n//\nvar KEY_INVALID = new RegExp(TEST_KEY_INVALID.source, 'g');\nvar PATH_INVALID = new RegExp(TEST_PATH_INVALID.source, 'g');\nvar SLASH = '\\\\'.charCodeAt(0);\nconst IS_DOT = '.'.charCodeAt(0);\n\nfunction sanitise(name, isPath) {\n  var correctCharacters = function (match) {\n    var good = '';\n    for (var i = 0; i < match.length; i++) {\n      var code = match.charCodeAt(i);\n      // If you're sanitising a path, a slash character is there to be interpreted\n      // by whatever parses the path later as \"escape the next thing\".\n      //\n      // e.g., if you want to index THIS string:\n      //   {\"foo\": {\"bar.baz\": \"THIS\"}}\n      // Your index path would be \"foo.bar\\.baz\".\n\n      if (code === IS_DOT && isPath && i === 0) {\n        good += '.';\n      } else if (code === SLASH && isPath) {\n        continue;\n      } else {\n        good += '_c' + code + '_';\n      }\n    }\n    return good;\n  };\n\n  if (isPath) {\n    return name.replace(PATH_INVALID, correctCharacters);\n  } else {\n    return name.replace(KEY_INVALID, correctCharacters);\n  }\n}\n\nfunction needsRewrite(data) {\n  for (var key of Object.keys(data)) {\n    if (needsSanitise(key)) {\n      return true;\n    } else if (data[key] === null || typeof data[key] === 'boolean') {\n      return true;\n    } else if (typeof data[key] === 'object') {\n      return needsRewrite(data[key]);\n    }\n  }\n}\n\nfunction rewrite(data) {\n  if (!needsRewrite(data)) {\n    return false;\n  }\n\n  var isArray = Array.isArray(data);\n  var clone = isArray\n    ? []\n    : {};\n\n  Object.keys(data).forEach(function (key) {\n    var safeKey = isArray ? key : sanitise(key);\n\n    if (data[key] === null) {\n      clone[safeKey] = IDB_NULL;\n    } else if (typeof data[key] === 'boolean') {\n      clone[safeKey] = data[key] ? IDB_TRUE : IDB_FALSE;\n    } else if (typeof data[key] === 'object') {\n      clone[safeKey] = rewrite(data[key]);\n    } else {\n      clone[safeKey] = data[key];\n    }\n  });\n\n  return clone;\n}\n\nvar DOC_STORE = 'docs';\nvar META_STORE = 'meta';\n\nfunction idbError(callback) {\n  return function (evt) {\n    var message = 'unknown_error';\n    if (evt.target && evt.target.error) {\n      message = evt.target.error.name || evt.target.error.message;\n    }\n    callback(Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"IDB_ERROR\"], message, evt.type));\n  };\n}\n\nfunction processAttachment(name, src, doc, isBinary) {\n\n  delete doc._attachments[name].stub;\n\n  if (isBinary) {\n    doc._attachments[name].data =\n      src.attachments[doc._attachments[name].digest].data;\n    return Promise.resolve();\n  }\n\n  return new Promise(function (resolve) {\n    var data = src.attachments[doc._attachments[name].digest].data;\n    Object(pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_0__[\"readAsBinaryString\"])(data, function (binString) {\n      doc._attachments[name].data = Object(pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_0__[\"btoa\"])(binString);\n      delete doc._attachments[name].length;\n      resolve();\n    });\n  });\n}\n\nfunction rawIndexFields(ddoc, viewName) {\n  // fields are an array of either the string name of the field, or a key value\n  var fields = ddoc.views[viewName].options &&\n               ddoc.views[viewName].options.def &&\n               ddoc.views[viewName].options.def.fields || [];\n\n  // Either ['foo'] or [{'foo': 'desc'}]\n  return fields.map(function (field) {\n    if (typeof field === 'string') {\n      return field;\n    } else {\n      return Object.keys(field)[0];\n    }\n  });\n}\n\nfunction naturalIndexName(fields) {\n  return '_find_idx/' + fields.join('/');\n}\n\n/**\n * Convert the fields the user gave us in the view and convert them to work for\n * indexeddb.\n *\n * fields is an array of field strings. A field string could be one field:\n *   'foo'\n * Or it could be a json path:\n *   'foo.bar'\n */\nfunction correctIndexFields(fields) {\n  // Every index has to have deleted at the front, because when we do a query\n  // we need to filter out deleted documents.\n  return ['deleted'].concat(\n    fields.map(function (field) {\n      if (field in ['_id', '_rev', '_deleted', '_attachments']) {\n        // These properties are stored at the top level without the underscore\n        return field.substr(1);\n      } else {\n        // The custom document fields are inside the `data` property\n        return 'data.' + sanitise(field, true);\n      }\n    })\n  );\n}\n\n//\n// Core PouchDB schema version. Increment this if we, as a library, want to make\n// schema changes in indexeddb. See upgradePouchDbSchema()\n//\nvar POUCHDB_IDB_VERSION = 1;\n\n//\n// Functions that manage a combinate indexeddb version, by combining the current\n// time in millis that represents user migrations with a large multiplier that\n// represents PouchDB system migrations.\n//\n// This lets us use the idb version number to both represent\n// PouchDB-library-level migrations as well as \"user migrations\" required for\n// when design documents trigger the addition or removal of native indexes.\n//\n// Given that Number.MAX_SAFE_INTEGER = 9007199254740991\n//\n// We can easily use the largest 2-3 digits and either allow:\n//  - 900 system migrations up to 2198/02/18\n//  - or 89 system migrations up to 5050/02/14\n//\n// This impl does the former. If this code still exists after 2198 someone send my\n// decendents a Spacebook message congratulating them on their impressive genes.\n//\n// 9007199254740991 <- MAX_SAFE_INTEGER\n//   10000000000000 <- 10^13\n//    7199254740991 <- 2198-02-18T16:59:00.991Z\n//\nvar versionMultiplier = Math.pow(10, 13);\nfunction createIdbVersion() {\n  return (versionMultiplier * POUCHDB_IDB_VERSION) + new Date().getTime();\n}\nfunction getPouchDbVersion(version) {\n  return Math.floor(version / versionMultiplier);\n}\n\nfunction maintainNativeIndexes(openReq, reject) {\n  var docStore = openReq.transaction.objectStore(DOC_STORE);\n  var ddocsReq = docStore.getAll(IDBKeyRange.bound('_design/', '_design/\\uffff'));\n\n  ddocsReq.onsuccess = function (e) {\n    var results = e.target.result;\n    var existingIndexNames = Array.from(docStore.indexNames);\n\n    // NB: the only thing we're supporting here is the declared indexing\n    // fields nothing more.\n    var expectedIndexes = results.filter(function (row) {\n      return row.deleted === 0 && row.revs[row.rev].data.views;\n    }).map(function (row) {\n      return row.revs[row.rev].data;\n    }).reduce(function (indexes, ddoc) {\n      return Object.keys(ddoc.views).reduce(function (acc, viewName) {\n        var fields = rawIndexFields(ddoc, viewName);\n\n        if (fields && fields.length > 0) {\n          acc[naturalIndexName(fields)] = correctIndexFields(fields);\n        }\n\n        return acc;\n      }, indexes);\n    }, {});\n\n    var expectedIndexNames = Object.keys(expectedIndexes);\n\n    // Delete any indexes that aren't system indexes or expected\n    var systemIndexNames = ['seq'];\n    existingIndexNames.forEach(function (index) {\n      if (systemIndexNames.indexOf(index) === -1  && expectedIndexNames.indexOf(index) === -1) {\n        docStore.deleteIndex(index);\n      }\n    });\n\n    // Work out which indexes are missing and create them\n    var newIndexNames = expectedIndexNames.filter(function (ei) {\n      return existingIndexNames.indexOf(ei) === -1;\n    });\n\n    try {\n      newIndexNames.forEach(function (indexName) {\n        docStore.createIndex(indexName, expectedIndexes[indexName]);\n      });\n    } catch (err) {\n      reject(err);\n    }\n  };\n}\n\nfunction upgradePouchDbSchema(db, pouchdbVersion) {\n  if (pouchdbVersion < 1) {\n    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});\n    docStore.createIndex('seq', 'seq', {unique: true});\n\n    db.createObjectStore(META_STORE, {keyPath: 'id'});\n  }\n\n  // Declare more PouchDB schema changes here\n  // if (pouchdbVersion < 2) { .. }\n}\n\nfunction openDatabase(openDatabases, api, opts, resolve, reject) {\n  var openReq = opts.versionchanged ?\n    indexedDB.open(opts.name) :\n    indexedDB.open(opts.name, createIdbVersion());\n\n  openReq.onupgradeneeded = function (e) {\n    if (e.oldVersion > 0 && e.oldVersion < versionMultiplier) {\n      // This DB was created with the \"idb\" adapter, **not** this one.\n      // For now we're going to just error out here: users must manually\n      // migrate between the two. In the future, dependent on performance tests,\n      // we might silently migrate\n      throw new Error('Incorrect adapter: you should specify the \"idb\" adapter to open this DB');\n    } else if (e.oldVersion === 0 && e.newVersion < versionMultiplier) {\n      // Firefox still creates the database with version=1 even if we throw,\n      // so we need to be sure to destroy the empty database before throwing\n      indexedDB.deleteDatabase(opts.name);\n      throw new Error('Database was deleted while open');\n    }\n\n    var db = e.target.result;\n\n    var pouchdbVersion = getPouchDbVersion(e.oldVersion);\n    upgradePouchDbSchema(db, pouchdbVersion);\n    maintainNativeIndexes(openReq, reject);\n  };\n\n  openReq.onblocked = function (e) {\n      // AFAICT this only occurs if, after sending `onversionchange` events to\n      // all other open DBs (ie in different tabs), there are still open\n      // connections to the DB. In this code we should never see this because we\n      // close our DBs on these events, and all DB interactions are wrapped in\n      // safely re-opening the DB.\n      console.error('onblocked, this should never happen', e);\n  };\n\n  openReq.onsuccess = function (e) {\n    var idb = e.target.result;\n\n    idb.onabort = function (e) {\n      console.error('Database has a global failure', e.target.error);\n      delete openDatabases[opts.name];\n      idb.close();\n    };\n\n    idb.onversionchange = function () {\n      console.log('Database was made stale, closing handle');\n      openDatabases[opts.name].versionchanged = true;\n      idb.close();\n    };\n\n    idb.onclose = function () {\n      console.log('Database was made stale, closing handle');\n      if (opts.name in openDatabases) {\n        openDatabases[opts.name].versionchanged = true;\n      }\n    };\n\n    var metadata = {id: META_STORE};\n    var txn = idb.transaction([META_STORE], 'readwrite');\n\n    txn.oncomplete = function () {\n      resolve({idb: idb, metadata: metadata});\n    };\n\n    var metaStore = txn.objectStore(META_STORE);\n    metaStore.get(META_STORE).onsuccess = function (e) {\n      metadata = e.target.result || metadata;\n      var changed = false;\n\n      if (!('doc_count' in metadata)) {\n        changed = true;\n        metadata.doc_count = 0;\n      }\n\n      if (!('seq' in metadata)) {\n        changed = true;\n        metadata.seq = 0;\n      }\n\n      if (!('db_uuid' in metadata)) {\n        changed = true;\n        metadata.db_uuid = Object(pouchdb_utils__WEBPACK_IMPORTED_MODULE_3__[\"uuid\"])();\n      }\n\n      if (changed) {\n        metaStore.put(metadata);\n      }\n    };\n  };\n\n  openReq.onerror = function (e) {\n    reject(e.target.error);\n  };\n}\n\nfunction setup (openDatabases, api, opts) {\n  if (!openDatabases[opts.name] || openDatabases[opts.name].versionchanged) {\n    opts.versionchanged = openDatabases[opts.name] &&\n                          openDatabases[opts.name].versionchanged;\n\n    openDatabases[opts.name] = new Promise(function (resolve, reject) {\n      openDatabase(openDatabases, api, opts, resolve, reject);\n    });\n  }\n\n  return openDatabases[opts.name];\n}\n\nfunction info (metadata, callback) {\n  callback(null, {\n    doc_count: metadata.doc_count,\n    update_seq: metadata.seq\n  });\n}\n\nfunction get (txn, id, opts, callback) {\n  if (txn.error) {\n    return callback(txn.error);\n  }\n\n  txn.txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {\n    var doc = e.target.result;\n    var rev;\n    if (!opts.rev) {\n      rev = (doc && doc.rev);\n    } else {\n      rev = opts.latest ? Object(pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__[\"latest\"])(opts.rev, doc) : opts.rev;\n    }\n\n    if (!doc || (doc.deleted && !opts.rev) || !(rev in doc.revs)) {\n      callback(Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"MISSING_DOC\"], 'missing'));\n      return;\n    }\n\n    var result = doc.revs[rev].data;\n    result._id = doc.id;\n    result._rev = rev;\n\n    // WARNING: expecting possible old format\n    // TODO: why are we passing the transaction in the context?\n    //       It's not clear we ever thread these txns usefully\n    callback(null, {\n      doc: result,\n      metadata: doc,\n      ctx: txn\n    });\n  };\n}\n\nfunction parseAttachment(attachment, opts, cb) {\n  if (opts.binary) {\n    return cb(null, attachment);\n  } else {\n    Object(pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_0__[\"readAsBinaryString\"])(attachment, function (binString) {\n      cb(null, Object(pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_0__[\"btoa\"])(binString));\n    });\n  }\n}\n\nfunction getAttachment(txn, docId, attachId, _, opts, cb) {\n  if (txn.error) {\n    return cb(txn.error);\n  }\n\n  var attachment;\n\n  txn.txn.objectStore(DOC_STORE).get(docId).onsuccess = function (e) {\n    var doc = e.target.result;\n    var rev = doc.revs[opts.rev || doc.rev].data;\n    var digest = rev._attachments[attachId].digest;\n    attachment = doc.attachments[digest].data;\n  };\n\n  txn.txn.oncomplete = function () {\n    parseAttachment(attachment, opts, cb);\n  };\n\n  txn.txn.onabort = cb;\n}\n\nfunction bulkDocs (api, req, opts, metadata, dbOpts, idbChanges, callback) {\n\n  var txn;\n\n  // TODO: I would prefer to get rid of these globals\n  var error;\n  var results = [];\n  var docs = [];\n  var lastWriteIndex;\n\n  var revsLimit = dbOpts.revs_limit || 1000;\n  var rewriteEnabled = dbOpts.name.indexOf(\"-mrview-\") === -1;\n  const autoCompaction = dbOpts.auto_compaction;\n\n  // We only need to track 1 revision for local documents\n  function docsRevsLimit(doc) {\n    return /^_local/.test(doc.id) ? 1 : revsLimit;\n  }\n\n  function rootIsMissing(doc) {\n    return doc.rev_tree[0].ids[1].status === 'missing';\n  }\n\n  function parseBase64(data) {\n    try {\n      return atob(data);\n    } catch (e) {\n      return {\n        error: Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"BAD_ARG\"], 'Attachment is not a valid base64 string')\n      };\n    }\n  }\n\n  // Reads the original doc from the store if available\n  // As in allDocs with keys option using multiple get calls is the fastest way\n  function fetchExistingDocs(txn, docs) {\n    var fetched = 0;\n    var oldDocs = {};\n\n    function readDone(e) {\n      if (e.target.result) {\n        oldDocs[e.target.result.id] = e.target.result;\n      }\n      if (++fetched === docs.length) {\n        processDocs(txn, docs, oldDocs);\n      }\n    }\n\n    docs.forEach(function (doc) {\n      txn.objectStore(DOC_STORE).get(doc.id).onsuccess = readDone;\n    });\n  }\n\n  function revHasAttachment(doc, rev, digest) {\n    return doc.revs[rev] &&\n      doc.revs[rev].data._attachments &&\n      Object.values(doc.revs[rev].data._attachments).find(function (att) {\n        return att.digest === digest;\n      });\n  }\n\n  function processDocs(txn, docs, oldDocs) {\n\n    docs.forEach(function (doc, i) {\n      var newDoc;\n\n      // The first document write cannot be a deletion\n      if ('was_delete' in opts && !(Object.prototype.hasOwnProperty.call(oldDocs, doc.id))) {\n        newDoc = Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"MISSING_DOC\"], 'deleted');\n\n      // The first write of a document cannot specify a revision\n      } else if (opts.new_edits &&\n                 !Object.prototype.hasOwnProperty.call(oldDocs, doc.id) &&\n                 rootIsMissing(doc)) {\n        newDoc = Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"REV_CONFLICT\"]);\n\n      // Update the existing document\n      } else if (Object.prototype.hasOwnProperty.call(oldDocs, doc.id)) {\n        newDoc = update(txn, doc, oldDocs[doc.id]);\n        // The update can be rejected if it is an update to an existing\n        // revision, if so skip it\n        if (newDoc == false) {\n          return;\n        }\n\n      // New document\n      } else {\n        // Ensure new documents are also stemmed\n        var merged = Object(pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__[\"merge\"])([], doc.rev_tree[0], docsRevsLimit(doc));\n        doc.rev_tree = merged.tree;\n        doc.stemmedRevs = merged.stemmedRevs;\n        newDoc = doc;\n        newDoc.isNewDoc = true;\n        newDoc.wasDeleted = doc.revs[doc.rev].deleted ? 1 : 0;\n      }\n\n      if (newDoc.error) {\n        results[i] = newDoc;\n      } else {\n        oldDocs[newDoc.id] = newDoc;\n        lastWriteIndex = i;\n        write(txn, newDoc, i);\n      }\n    });\n  }\n\n  // Converts from the format returned by parseDoc into the new format\n  // we use to store\n  function convertDocFormat(doc) {\n\n    var newDoc = {\n      id: doc.metadata.id,\n      rev: doc.metadata.rev,\n      rev_tree: doc.metadata.rev_tree,\n      revs: doc.metadata.revs || {}\n    };\n\n    newDoc.revs[newDoc.rev] = {\n      data: doc.data,\n      deleted: doc.metadata.deleted\n    };\n\n    return newDoc;\n  }\n\n  function update(txn, doc, oldDoc) {\n\n    // Ignore updates to existing revisions\n    if ((doc.rev in oldDoc.revs) && !opts.new_edits) {\n      return false;\n    }\n\n    var isRoot = /^1-/.test(doc.rev);\n\n    // Reattach first writes after a deletion to last deleted tree\n    if (oldDoc.deleted && !doc.deleted && opts.new_edits && isRoot) {\n      var tmp = doc.revs[doc.rev].data;\n      tmp._rev = oldDoc.rev;\n      tmp._id = oldDoc.id;\n      doc = convertDocFormat(Object(pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_1__[\"parseDoc\"])(tmp, opts.new_edits, dbOpts));\n    }\n\n    var merged = Object(pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__[\"merge\"])(oldDoc.rev_tree, doc.rev_tree[0], docsRevsLimit(doc));\n    doc.stemmedRevs = merged.stemmedRevs;\n    doc.rev_tree = merged.tree;\n\n    // Merge the old and new rev data\n    var revs = oldDoc.revs;\n    revs[doc.rev] = doc.revs[doc.rev];\n    doc.revs = revs;\n\n    doc.attachments = oldDoc.attachments;\n\n    var inConflict = opts.new_edits && (((oldDoc.deleted && doc.deleted) ||\n       (!oldDoc.deleted && merged.conflicts !== 'new_leaf') ||\n       (oldDoc.deleted && !doc.deleted && merged.conflicts === 'new_branch') ||\n       (oldDoc.rev === doc.rev)));\n\n    if (inConflict) {\n      return Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"REV_CONFLICT\"]);\n    }\n\n    doc.wasDeleted = oldDoc.deleted;\n\n    return doc;\n  }\n\n  function write(txn, doc, i) {\n\n    // We copy the data from the winning revision into the root\n    // of the document so that it can be indexed\n    var winningRev$$1 = Object(pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__[\"winningRev\"])(doc);\n    // rev of new doc for attachments and to return it\n    var writtenRev = doc.rev;\n    var isLocal = /^_local/.test(doc.id);\n\n    var theDoc = doc.revs[winningRev$$1].data;\n\n    const isNewDoc = doc.isNewDoc;\n\n    if (rewriteEnabled) {\n      // doc.data is what we index, so we need to clone and rewrite it, and clean\n      // it up for indexability\n      var result = rewrite(theDoc);\n      if (result) {\n        doc.data = result;\n        delete doc.data._attachments;\n      } else {\n        doc.data = theDoc;\n      }\n    } else {\n      doc.data = theDoc;\n    }\n\n    doc.rev = winningRev$$1;\n    // .deleted needs to be an int for indexing\n    doc.deleted = doc.revs[winningRev$$1].deleted ? 1 : 0;\n\n    // Bump the seq for every new (non local) revision written\n    // TODO: index expects a unique seq, not sure if ignoring local will\n    // work\n    if (!isLocal) {\n      doc.seq = ++metadata.seq;\n\n      var delta = 0;\n      // If its a new document, we wont decrement if deleted\n      if (doc.isNewDoc) {\n        delta = doc.deleted ? 0 : 1;\n      } else if (doc.wasDeleted !== doc.deleted) {\n        delta = doc.deleted ? -1 : 1;\n      }\n      metadata.doc_count += delta;\n    }\n    delete doc.isNewDoc;\n    delete doc.wasDeleted;\n\n    // If there have been revisions stemmed when merging trees,\n    // delete their data\n    let revsToDelete = doc.stemmedRevs || [];\n\n    if (autoCompaction && !isNewDoc) {\n      const result = Object(pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__[\"compactTree\"])(doc);\n      if (result.length) {\n        revsToDelete = revsToDelete.concat(result);\n      }\n    }\n\n    if (revsToDelete.length) {\n      revsToDelete.forEach(function (rev) { delete doc.revs[rev]; });\n    }\n\n    delete doc.stemmedRevs;\n\n    if (!('attachments' in doc)) {\n      doc.attachments = {};\n    }\n\n    if (theDoc._attachments) {\n      for (var k in theDoc._attachments) {\n        var attachment = theDoc._attachments[k];\n        if (attachment.stub) {\n          if (!(attachment.digest in doc.attachments)) {\n            error = Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"MISSING_STUB\"]);\n            // TODO: Not sure how safe this manual abort is, seeing\n            // console issues\n            txn.abort();\n            return;\n          }\n\n          if (revHasAttachment(doc, writtenRev, attachment.digest)) {\n            doc.attachments[attachment.digest].revs[writtenRev] = true;\n          }\n\n        } else {\n\n          doc.attachments[attachment.digest] = attachment;\n          doc.attachments[attachment.digest].revs = {};\n          doc.attachments[attachment.digest].revs[writtenRev] = true;\n\n          theDoc._attachments[k] = {\n            stub: true,\n            digest: attachment.digest,\n            content_type: attachment.content_type,\n            length: attachment.length,\n            revpos: parseInt(writtenRev, 10)\n          };\n        }\n      }\n    }\n\n    // Local documents have different revision handling\n    if (isLocal && doc.deleted) {\n      txn.objectStore(DOC_STORE).delete(doc.id).onsuccess = function () {\n        results[i] = {\n          ok: true,\n          id: doc.id,\n          rev: '0-0'\n        };\n      };\n      updateSeq(i);\n      return;\n    }\n\n    txn.objectStore(DOC_STORE).put(doc).onsuccess = function () {\n      results[i] = {\n        ok: true,\n        id: doc.id,\n        rev: writtenRev\n      };\n      updateSeq(i);\n    };\n  }\n\n  function updateSeq(i) {\n    if (i === lastWriteIndex) {\n      txn.objectStore(META_STORE).put(metadata);\n    }\n  }\n\n  function preProcessAttachment(attachment) {\n    if (attachment.stub) {\n      return Promise.resolve(attachment);\n    }\n\n    var binData;\n    if (typeof attachment.data === 'string') {\n      binData = parseBase64(attachment.data);\n      if (binData.error) {\n        return Promise.reject(binData.error);\n      }\n      attachment.data = Object(pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_0__[\"binaryStringToBlobOrBuffer\"])(binData, attachment.content_type);\n    } else {\n      binData = attachment.data;\n    }\n\n    return new Promise(function (resolve) {\n      Object(pouchdb_md5__WEBPACK_IMPORTED_MODULE_2__[\"binaryMd5\"])(binData, function (result) {\n        attachment.digest = 'md5-' + result;\n        attachment.length = binData.size || binData.length || 0;\n        resolve(attachment);\n      });\n    });\n  }\n\n  function preProcessAttachments() {\n    var promises = docs.map(function (doc) {\n      var data = doc.revs[doc.rev].data;\n      if (!data._attachments) {\n        return Promise.resolve(data);\n      }\n      var attachments = Object.keys(data._attachments).map(function (k) {\n        data._attachments[k].name = k;\n        return preProcessAttachment(data._attachments[k]);\n      });\n\n      return Promise.all(attachments).then(function (newAttachments) {\n        var processed = {};\n        newAttachments.forEach(function (attachment) {\n          processed[attachment.name] = attachment;\n          delete attachment.name;\n        });\n        data._attachments = processed;\n        return data;\n      });\n    });\n    return Promise.all(promises);\n  }\n\n  for (var i = 0, len = req.docs.length; i < len; i++) {\n    var result;\n    // TODO: We should get rid of throwing for invalid docs, also not sure\n    // why this is needed in idb-next and not idb\n    try {\n      result = Object(pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_1__[\"parseDoc\"])(req.docs[i], opts.new_edits, dbOpts);\n    } catch (err) {\n      result = err;\n    }\n    if (result.error) {\n      return callback(result);\n    }\n\n    // Ideally parseDoc would return data in this format, but it is currently\n    // shared so we need to convert\n    docs.push(convertDocFormat(result));\n  }\n\n  preProcessAttachments().then(function () {\n    api._openTransactionSafely([DOC_STORE, META_STORE], 'readwrite', function (err, _txn) {\n      if (err) {\n        return callback(err);\n      }\n\n      txn = _txn;\n\n      txn.onabort = function () {\n        callback(error || Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"UNKNOWN_ERROR\"], 'transaction was aborted'));\n      };\n      txn.ontimeout = idbError(callback);\n\n      txn.oncomplete = function () {\n        idbChanges.notify(dbOpts.name);\n        callback(null, results);\n      };\n\n      // We would like to use promises here, but idb sucks\n      fetchExistingDocs(txn, docs);\n    });\n  }).catch(function (err) {\n    callback(err);\n  });\n}\n\nfunction allDocsKeys(keys, docStore, allDocsInner) {\n  // It's not guaranted to be returned in right order\n  var valuesBatch = new Array(keys.length);\n  var count = 0;\n  keys.forEach(function (key, index) {\n    docStore.get(key).onsuccess = function (event) {\n      if (event.target.result) {\n      valuesBatch[index] = event.target.result;\n      } else {\n        valuesBatch[index] = {key: key, error: 'not_found'};\n      }\n      count++;\n      if (count === keys.length) {\n        valuesBatch.forEach(function (doc) {\n            allDocsInner(doc);\n        });\n      }\n    };\n  });\n}\n\nfunction createKeyRange(start, end, inclusiveEnd, key, descending) {\n  try {\n    if (start && end) {\n      if (descending) {\n        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\n      } else {\n        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\n      }\n    } else if (start) {\n      if (descending) {\n        return IDBKeyRange.upperBound(start);\n      } else {\n        return IDBKeyRange.lowerBound(start);\n      }\n    } else if (end) {\n      if (descending) {\n        return IDBKeyRange.lowerBound(end, !inclusiveEnd);\n      } else {\n        return IDBKeyRange.upperBound(end, !inclusiveEnd);\n      }\n    } else if (key) {\n      return IDBKeyRange.only(key);\n    }\n  } catch (e) {\n    return {error: e};\n  }\n  return null;\n}\n\nfunction handleKeyRangeError(opts, metadata, err, callback) {\n  if (err.name === \"DataError\" && err.code === 0) {\n    // data error, start is less than end\n    var returnVal = {\n      total_rows: metadata.doc_count,\n      offset: opts.skip,\n      rows: []\n    };\n    /* istanbul ignore if */\n    if (opts.update_seq) {\n      returnVal.update_seq = metadata.seq;\n    }\n    return callback(null, returnVal);\n  }\n  callback(Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"IDB_ERROR\"], err.name, err.message));\n}\n\nfunction allDocs (txn, metadata, opts, callback) {\n  if (txn.error) {\n    return callback(txn.error);\n  }\n\n  // TODO: Weird hack, I dont like it\n  if (opts.limit === 0) {\n    var returnVal = {\n      total_rows: metadata.doc_count,\n      offset: opts.skip,\n      rows: []\n    };\n\n    /* istanbul ignore if */\n    if (opts.update_seq) {\n      returnVal.update_seq = metadata.seq;\n    }\n    return callback(null, returnVal);\n  }\n\n  var results = [];\n  var processing = [];\n\n  var start = 'startkey' in opts ? opts.startkey : false;\n  var end = 'endkey' in opts ? opts.endkey : false;\n  var key = 'key' in opts ? opts.key : false;\n  var keys = 'keys' in opts ? opts.keys : false;\n  var skip = opts.skip || 0;\n  var limit = typeof opts.limit === 'number' ? opts.limit : -1;\n  var inclusiveEnd = opts.inclusive_end !== false;\n  var descending = 'descending' in opts && opts.descending ? 'prev' : null;\n\n  var keyRange;\n  if (!keys) {\n    keyRange = createKeyRange(start, end, inclusiveEnd, key, descending);\n    if (keyRange && keyRange.error) {\n      return handleKeyRangeError(opts, metadata, keyRange.error, callback);\n    }\n  }\n\n  var docStore = txn.txn.objectStore(DOC_STORE);\n\n  txn.txn.oncomplete = onTxnComplete;\n\n  if (keys) {\n    return allDocsKeys(opts.keys, docStore, allDocsInner);\n  }\n\n  function include_doc(row, doc) {\n    var docData = doc.revs[doc.rev].data;\n\n    row.doc = docData;\n    row.doc._id = doc.id;\n    row.doc._rev = doc.rev;\n    if (opts.conflicts) {\n      var conflicts = Object(pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__[\"collectConflicts\"])(doc);\n      if (conflicts.length) {\n        row.doc._conflicts = conflicts;\n      }\n    }\n    if (opts.attachments && docData._attachments) {\n      for (var name in docData._attachments) {\n        processing.push(processAttachment(name, doc, row.doc, opts.binary));\n      }\n    }\n  }\n\n  function allDocsInner(doc) {\n    if (doc.error && keys) {\n      // key was not found with \"keys\" requests\n      results.push(doc);\n      return true;\n    }\n\n    var row = {\n      id: doc.id,\n      key: doc.id,\n      value: {\n        rev: doc.rev\n      }\n    };\n\n    var deleted = doc.deleted;\n    if (deleted) {\n      if (keys) {\n        results.push(row);\n        row.value.deleted = true;\n        row.doc = null;\n      }\n    } else if (skip-- <= 0) {\n      results.push(row);\n      if (opts.include_docs) {\n        include_doc(row, doc);\n      }\n      if (--limit === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function onTxnComplete() {\n    Promise.all(processing).then(function () {\n      var returnVal = {\n        total_rows: metadata.doc_count,\n        offset: 0,\n        rows: results\n      };\n\n      /* istanbul ignore if */\n      if (opts.update_seq) {\n        returnVal.update_seq = metadata.seq;\n      }\n      callback(null, returnVal);\n    });\n  }\n\n  var cursor = descending ?\n    docStore.openCursor(keyRange, descending) :\n    docStore.openCursor(keyRange);\n\n  cursor.onsuccess = function (e) {\n\n    var doc = e.target.result && e.target.result.value;\n\n    // Happens if opts does not have limit,\n    // because cursor will end normally then,\n    // when all docs are retrieved.\n    // Would not be needed, if getAll() optimization was used like in #6059\n    if (!doc) { return; }\n\n    // Skip local docs\n    if (/^_local/.test(doc.id)) {\n      return e.target.result.continue();\n    }\n\n    var continueCursor = allDocsInner(doc);\n    if (continueCursor) {\n      e.target.result.continue();\n    }\n  };\n\n}\n\nfunction changes (txn, idbChanges, api, dbOpts, opts) {\n  if (txn.error) {\n    return opts.complete(txn.error);\n  }\n\n  if (opts.continuous) {\n    var id = dbOpts.name + ':' + Object(pouchdb_utils__WEBPACK_IMPORTED_MODULE_3__[\"uuid\"])();\n    idbChanges.addListener(dbOpts.name, id, api, opts);\n    idbChanges.notify(dbOpts.name);\n    return {\n      cancel: function () {\n        idbChanges.removeListener(dbOpts.name, id);\n      }\n    };\n  }\n\n  var limit = 'limit' in opts ? opts.limit : -1;\n  if (limit === 0) {\n    limit = 1;\n  }\n\n  var store = txn.txn.objectStore(DOC_STORE).index('seq');\n\n  var filter = Object(pouchdb_utils__WEBPACK_IMPORTED_MODULE_3__[\"filterChange\"])(opts);\n  var received = 0;\n\n  var lastSeq = opts.since || 0;\n  var results = [];\n\n  var processing = [];\n\n  function onReqSuccess(e) {\n    if (!e.target.result) { return; }\n    var cursor = e.target.result;\n    var doc = cursor.value;\n    // Overwrite doc.data, which may have been rewritten (see rewrite.js) with\n    // the clean version for that rev\n    doc.data = doc.revs[doc.rev].data;\n    doc.data._id = doc.id;\n    doc.data._rev = doc.rev;\n    if (doc.deleted) {\n      doc.data._deleted = true;\n    }\n\n    if (opts.doc_ids && opts.doc_ids.indexOf(doc.id) === -1) {\n      return cursor.continue();\n    }\n\n    // WARNING: expecting possible old format\n    var change = opts.processChange(doc.data, doc, opts);\n    change.seq = doc.seq;\n    lastSeq = doc.seq;\n    var filtered = filter(change);\n\n    // If its an error\n    if (typeof filtered === 'object') {\n      return opts.complete(filtered);\n    }\n\n    if (filtered) {\n      received++;\n      if (opts.return_docs) {\n        results.push(change);\n      }\n\n      if (opts.include_docs && opts.attachments && doc.data._attachments) {\n        var promises = [];\n        for (var name in doc.data._attachments) {\n          var p = processAttachment(name, doc, change.doc, opts.binary);\n          // We add the processing promise to 2 arrays, one tracks all\n          // the promises needed before we fire onChange, the other\n          // ensure we process all attachments before onComplete\n          promises.push(p);\n          processing.push(p);\n        }\n\n        Promise.all(promises).then(function () {\n          opts.onChange(change);\n        });\n      } else {\n        opts.onChange(change);\n      }\n    }\n    if (received !== limit) {\n      cursor.continue();\n    }\n  }\n\n  function onTxnComplete() {\n    Promise.all(processing).then(function () {\n      opts.complete(null, {\n        results: results,\n        last_seq: lastSeq\n      });\n    });\n  }\n\n  var req;\n  if (opts.descending) {\n    req = store.openCursor(null, 'prev');\n  } else {\n    req = store.openCursor(IDBKeyRange.lowerBound(opts.since, true));\n  }\n\n  txn.txn.oncomplete = onTxnComplete;\n  req.onsuccess = onReqSuccess;\n}\n\nfunction getRevisionTree (txn, id, callback) {\n  if (txn.error) {\n    return callback(txn.error);\n  }\n\n  var req = txn.txn.objectStore(DOC_STORE).get(id);\n  req.onsuccess = function (e) {\n    if (!e.target.result) {\n      callback(Object(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"createError\"])(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__[\"MISSING_DOC\"]));\n    } else {\n      callback(null, e.target.result.rev_tree);\n    }\n  };\n}\n\nfunction doCompaction (txn, id, revs, callback) {\n  if (txn.error) {\n    return callback(txn.error);\n  }\n\n  var docStore = txn.txn.objectStore(DOC_STORE);\n\n  docStore.get(id).onsuccess = function (e) {\n    var doc = e.target.result;\n\n    Object(pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__[\"traverseRevTree\"])(doc.rev_tree, function (isLeaf, pos, revHash, ctx, opts) {\n      var rev = pos + '-' + revHash;\n      if (revs.indexOf(rev) !== -1) {\n        opts.status = 'missing';\n      }\n    });\n\n    var attachments = [];\n\n    revs.forEach(function (rev) {\n      if (rev in doc.revs) {\n        // Make a list of attachments that are used by the revisions being\n        // deleted\n        if (doc.revs[rev].data._attachments) {\n          for (var k in doc.revs[rev].data._attachments) {\n            attachments.push(doc.revs[rev].data._attachments[k].digest);\n          }\n        }\n        delete doc.revs[rev];\n      }\n    });\n\n    // Attachments have a list of revisions that are using them, when\n    // that list becomes empty we can delete the attachment.\n    attachments.forEach(function (digest) {\n      revs.forEach(function (rev) {\n        delete doc.attachments[digest].revs[rev];\n      });\n      if (!Object.keys(doc.attachments[digest].revs).length) {\n        delete doc.attachments[digest];\n      }\n    });\n\n    docStore.put(doc);\n  };\n\n  txn.txn.oncomplete = function () {\n    callback();\n  };\n}\n\nfunction destroy (dbOpts, openDatabases, idbChanges, callback) {\n\n  idbChanges.removeAllListeners(dbOpts.name);\n\n  function doDestroy() {\n    var req = indexedDB.deleteDatabase(dbOpts.name);\n    req.onsuccess = function () {\n      delete openDatabases[dbOpts.name];\n      callback(null, {ok: true});\n    };\n  }\n\n  // If the database is open we need to close it\n  if (dbOpts.name in openDatabases) {\n    openDatabases[dbOpts.name].then(function (res) {\n      res.idb.close();\n      doDestroy();\n    });\n  } else {\n    doDestroy();\n  }\n\n}\n\n// Adapted from\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-find/src/adapters/local/find/query-planner.js#L20-L24\n// This could change / improve in the future?\nvar COUCH_COLLATE_LO = null;\nvar COUCH_COLLATE_HI = '\\uffff'; // actually used as {\"\\uffff\": {}}\n\n// Adapted from: https://www.w3.org/TR/IndexedDB/#compare-two-keys\n// Importantly, *there is no upper bound possible* in idb. The ideal data\n// structure an infintely deep array:\n//   var IDB_COLLATE_HI = []; IDB_COLLATE_HI.push(IDB_COLLATE_HI)\n// But IDBKeyRange is not a fan of shenanigans, so I've just gone with 12 layers\n// because it looks nice and surely that's enough!\nvar IDB_COLLATE_LO = Number.NEGATIVE_INFINITY;\nvar IDB_COLLATE_HI = [[[[[[[[[[[[]]]]]]]]]]]];\n\n//\n// TODO: this should be made offical somewhere and used by AllDocs / get /\n// changes etc as well.\n//\nfunction externaliseRecord(idbDoc) {\n  var doc = idbDoc.revs[idbDoc.rev].data;\n  doc._id = idbDoc.id;\n  doc._rev = idbDoc.rev;\n  if (idbDoc.deleted) {\n    doc._deleted = true;\n  }\n\n  return doc;\n}\n\n/**\n * Generates a keyrange based on the opts passed to query\n *\n * The first key is always 0, as that's how we're filtering out deleted entries.\n */\nfunction generateKeyRange(opts) {\n  function defined(obj, k) {\n    return obj[k] !== void 0;\n  }\n\n  // Converts a valid CouchDB key into a valid IndexedDB one\n  function convert(key, exact) {\n    // The first item in every native index is doc.deleted, and we always want\n    // to only search documents that are not deleted.\n    // \"foo\" -> [0, \"foo\"]\n    var filterDeleted = [0].concat(key);\n\n    return filterDeleted.map(function (k) {\n      // null, true and false are not indexable by indexeddb. When we write\n      // these values we convert them to these constants, and so when we\n      // query for them we need to convert the query also.\n      if (k === null && exact) {\n        // for non-exact queries we treat null as a collate property\n        // see `if (!exact)` block below\n        return IDB_NULL;\n      } else if (k === true) {\n        return IDB_TRUE;\n      } else if (k === false) {\n        return IDB_FALSE;\n      }\n\n      if (!exact) {\n        // We get passed CouchDB's collate low and high values, so for non-exact\n        // ranged queries we're going to convert them to our IDB equivalents\n        if (k === COUCH_COLLATE_LO) {\n          return IDB_COLLATE_LO;\n        } else if (Object.prototype.hasOwnProperty.call(k, COUCH_COLLATE_HI)) {\n          return IDB_COLLATE_HI;\n        }\n      }\n\n      return k;\n    });\n  }\n\n  // CouchDB and so PouchdB defaults to true. We need to make this explicit as\n  // we invert these later for IndexedDB.\n  if (!defined(opts, 'inclusive_end')) {\n    opts.inclusive_end = true;\n  }\n  if (!defined(opts, 'inclusive_start')) {\n    opts.inclusive_start = true;\n  }\n\n  if (opts.descending) {\n    // Flip before generating. We'll check descending again later when performing\n    // an index request\n    var realEndkey = opts.startkey,\n        realInclusiveEnd = opts.inclusive_start;\n\n    opts.startkey = opts.endkey;\n    opts.endkey = realEndkey;\n    opts.inclusive_start = opts.inclusive_end;\n    opts.inclusive_end = realInclusiveEnd;\n  }\n\n  try {\n    if (defined(opts, 'key')) {\n      return IDBKeyRange.only(convert(opts.key, true));\n    }\n\n    if (defined(opts, 'startkey') && !defined(opts, 'endkey')) {\n      return IDBKeyRange.lowerBound(convert(opts.startkey), !opts.inclusive_start);\n    }\n\n    if (!defined(opts, 'startkey') && defined(opts, 'endkey')) {\n      return IDBKeyRange.upperBound(convert(opts.endkey), !opts.inclusive_end);\n    }\n\n    if (defined(opts, 'startkey') && defined(opts, 'endkey')) {\n      return IDBKeyRange.bound(\n        convert(opts.startkey),    convert(opts.endkey),\n        !opts.inclusive_start, !opts.inclusive_end\n      );\n    }\n\n    return IDBKeyRange.only([0]);\n  } catch (err) {\n    console.error('Could not generate keyRange', err, opts);\n    throw Error('Could not generate key range with ' + JSON.stringify(opts));\n  }\n}\n\nfunction getIndexHandle(pdb, fields, reject) {\n  var indexName = naturalIndexName(fields);\n\n  return new Promise(function (resolve) {\n    pdb._openTransactionSafely([DOC_STORE], 'readonly', function (err, txn) {\n      if (err) {\n        return idbError(reject)(err);\n      }\n\n      txn.onabort = idbError(reject);\n      txn.ontimeout = idbError(reject);\n\n      var existingIndexNames = Array.from(txn.objectStore(DOC_STORE).indexNames);\n\n      if (existingIndexNames.indexOf(indexName) === -1) {\n        // The index is missing, force a db restart and try again\n        pdb._freshen()\n          .then(function () { return getIndexHandle(pdb, fields, reject); })\n          .then(resolve);\n      } else {\n        resolve(txn.objectStore(DOC_STORE).index(indexName));\n      }\n    });\n  });\n}\n\n// In theory we should return something like the doc example below, but find\n// only needs rows: [{doc: {...}}], so I think we can just not bother for now\n// {\n//   \"offset\" : 0,\n//   \"rows\": [{\n//     \"id\": \"doc3\",\n//     \"key\": \"Lisa Says\",\n//     \"value\": null,\n//     \"doc\": {\n//       \"_id\": \"doc3\",\n//       \"_rev\": \"1-z\",\n//       \"title\": \"Lisa Says\"\n//     }\n//   }],\n//   \"total_rows\" : 4\n// }\nfunction query(idb, signature, opts) {\n  // At this stage, in the current implementation, find has already gone through\n  // and determined if the index already exists from PouchDB's perspective (eg\n  // there is a design doc for it).\n  //\n  // If we find that the index doesn't exist this means we have to close and\n  // re-open the DB to correct indexes before proceeding, at which point the\n  // index should exist.\n\n  var pdb = this;\n\n  // Assumption, there will be only one /, between the design document name\n  // and the view name.\n  var parts = signature.split('/');\n\n  return new Promise(function (resolve, reject) {\n    pdb.get('_design/' + parts[0]).then(function (ddoc) {\n      var fields = rawIndexFields(ddoc, parts[1]);\n      if (!fields) {\n        throw new Error('ddoc ' + ddoc._id +' with view ' + parts[1] +\n          ' does not have map.options.def.fields defined.');\n      }\n\n      var skip = opts.skip;\n      var limit = Number.isInteger(opts.limit) && opts.limit;\n\n      return getIndexHandle(pdb, fields, reject)\n        .then(function (indexHandle) {\n          var keyRange = generateKeyRange(opts);\n          var req = indexHandle.openCursor(keyRange, opts.descending ? 'prev' : 'next');\n\n          var rows = [];\n          req.onerror = idbError(reject);\n          req.onsuccess = function (e) {\n            var cursor = e.target.result;\n\n            if (!cursor || limit === 0) {\n              return resolve({\n                rows: rows\n              });\n            }\n\n            if (skip) {\n              cursor.advance(skip);\n              skip = false;\n              return;\n            }\n\n            if (limit) {\n              limit = limit - 1;\n            }\n\n            rows.push({doc: externaliseRecord(cursor.value)});\n            cursor.continue();\n          };\n        });\n      })\n      .catch(reject);\n  });\n\n}\n\nfunction viewCleanup() {\n  // I'm not sure we have to do anything here.\n  //\n  // One option is to just close and re-open the DB, which performs the same\n  // action. The only reason you'd want to call this is if you deleted a bunch\n  // of indexes and wanted the space back immediately.\n  //\n  // Otherwise index cleanup happens when:\n  //  - A DB is opened\n  //  - A find query is performed against an index that doesn't exist but should\n\n  return Promise.resolve();\n}\n\nvar ADAPTER_NAME = 'indexeddb';\n\n// TODO: Constructor should be capitalised\nvar idbChanges = new pouchdb_utils__WEBPACK_IMPORTED_MODULE_3__[\"changesHandler\"]();\n\n// A shared list of database handles\nvar openDatabases = {};\n\nfunction IdbPouch(dbOpts, callback) {\n\n  if (dbOpts.view_adapter) {\n    console.log('Please note that the indexeddb adapter manages _find indexes itself, therefore it is not using your specified view_adapter');\n  }\n  \n  var api = this;\n  var metadata = {};\n\n  // Wrapper that gives you an active DB handle. You probably want $t.\n  var $ = function (fun) {\n    return function () {\n      var args = Array.prototype.slice.call(arguments);\n      setup(openDatabases, api, dbOpts).then(function (res) {\n        metadata = res.metadata;\n        args.unshift(res.idb);\n        fun.apply(api, args);\n      }).catch(function (err) {\n        var last = args.pop();\n        if (typeof last === 'function') {\n          last(err);\n        } else {\n          console.error(err);\n        }\n      });\n    };\n  };\n  // the promise version of $\n  var $p = function (fun) {\n    return function () {\n      var args = Array.prototype.slice.call(arguments);\n\n      return setup(openDatabases, api, dbOpts).then(function (res) {\n        metadata = res.metadata;\n        args.unshift(res.idb);\n\n        return fun.apply(api, args);\n      });\n    };\n  };\n  // Wrapper that gives you a safe transaction handle. It's important to use\n  // this instead of opening your own transaction from a db handle got from $,\n  // because in the time between getting the db handle and opening the\n  // transaction it may have been invalidated by index changes.\n  var $t = function (fun, stores, mode) {\n    stores = stores || [DOC_STORE];\n    mode = mode || 'readonly';\n\n    return function () {\n      var args = Array.prototype.slice.call(arguments);\n      var txn = {};\n      setup(openDatabases, api, dbOpts).then(function (res) {\n        metadata = res.metadata;\n        txn.txn = res.idb.transaction(stores, mode);\n      }).catch(function (err) {\n        console.error('Failed to establish transaction safely');\n        console.error(err);\n        txn.error = err;\n      }).then(function () {\n        args.unshift(txn);\n        fun.apply(api, args);\n      });\n    };\n  };\n\n  api._openTransactionSafely = function (stores, mode, callback) {\n    $t(function (txn, callback) {\n      callback(txn.error, txn.txn);\n    }, stores, mode)(callback);\n  };\n\n  api._remote = false;\n  api.type = function () { return ADAPTER_NAME; };\n\n  api._id = $(function (_, cb) {\n    cb(null, metadata.db_uuid);\n  });\n\n  api._info = $(function (_, cb) {\n    return info(metadata, cb);\n  });\n\n  api._get = $t(get);\n\n  api._bulkDocs = $(function (_, req, opts, callback) {\n    bulkDocs(api, req, opts, metadata, dbOpts, idbChanges, callback);\n  });\n\n  api._allDocs = $t(function (txn, opts, cb) {\n    allDocs(txn, metadata, opts, cb);\n  });\n\n  api._getAttachment = $t(getAttachment);\n\n  api._changes = $t(function (txn, opts) {\n    changes(txn, idbChanges, api, dbOpts, opts);\n  });\n\n  api._getRevisionTree = $t(getRevisionTree);\n  api._doCompaction = $t(doCompaction, [DOC_STORE], 'readwrite');\n\n  api._customFindAbstractMapper = {\n    query: $p(query),\n    viewCleanup: $p(viewCleanup)\n  };\n\n  api._destroy = function (opts, callback) {\n    return destroy(dbOpts, openDatabases, idbChanges, callback);\n  };\n\n  api._close = $(function (db, cb) {\n    delete openDatabases[dbOpts.name];\n    db.close();\n    cb();\n  });\n\n  // Closing and re-opening the DB re-generates native indexes\n  api._freshen = function () {\n    return new Promise(function (resolve) {\n      api._close(function () {\n        $(resolve)();\n      });\n    });\n  };\n\n  // TODO: this setTimeout seems nasty, if its needed lets\n  // figure out / explain why\n  setTimeout(function () {\n    callback(null, api);\n  });\n}\n\n// TODO: this isnt really valid permanently, just being lazy to start\nIdbPouch.valid = function () {\n  return true;\n};\n\nfunction index (PouchDB) {\n  PouchDB.adapter(ADAPTER_NAME, IdbPouch, true);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/pouchdb-adapter-indexeddb/lib/index.es.js\n");

/***/ })

}]);